class Solution {
    List<List<String>> res=new ArrayList<>();
    List<String> temp=new ArrayList<>();
    boolean[][] f;
    public List<List<String>> partition(String s) {
        int len=s.length();
        f=new boolean[len][len];
        for(int i=len-1;i>=0;i--){
            Arrays.fill(f[i],true);
            for(int j=i+1;j<len;j++){
                f[i][j]=f[i+1][j-1]&&s.charAt(i)==s.charAt(j);
            }
        }
        dfs(s,0);
        return res;
    }
    public void dfs(String s,int n){
        int len=s.length();
        if(n==len){
            res.add(new ArrayList<String>(temp));
            return;
        }
        for(int i=n;i<len;i++){
            if(f[n][i]){
                temp.add(s.substring(n,i+1));
                dfs(s,i+1);
                temp.remove(temp.size()-1);
            }
        }
    }
}
