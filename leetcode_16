//1
class Solution {
    public int threeSumClosest(int[] nums, int target) 
    {
        int len=nums.length;
        int min=11110;
        int sum=0;
        for(var i=0;i<len-2;i++)
        {
            for(var j=i+1;j<len-1;j++)
            {
                for(var k=j+1;k<len;k++)
                {
                    if(Math.abs(nums[i]+nums[j]+nums[k]-target)<min)
                    {
                        sum=nums[i]+nums[j]+nums[k];
                        min=Math.abs(sum-target);
                    }
                }
            }
        }
        return sum;
    }
}
//2
class Solution {
    public int threeSumClosest(int[] nums, int target) 
    {
        int len=nums.length;
        Arrays.sort(nums);
        int min=11110;
        int res=0;
        for(var i=0;i<len-2;i++)
        {
            int j=i+1,k=len-1;
            while(j<k)
            {
                if(Math.abs(nums[i]+nums[j]+nums[k]-target)<min)
                {
                    res=nums[i]+nums[j]+nums[k];
                    min=Math.abs(nums[i]+nums[j]+nums[k]-target);
                }
                if(nums[i]+nums[j]+nums[k]>target)
                    k--;
                else
                    j++;
            }
        }
        return res;
    }
}
//3
class Solution {
    public int threeSumClosest(int[] nums, int target) 
    {
        int len=nums.length;
        Arrays.sort(nums);
        int min=11110;
        int res=0;
        for(var i=0;i<len-2;i++)
        {
            int j=i+1,k=len-1;
            while(j<k)
            {
                if(Math.abs(nums[i]+nums[j]+nums[k]-target)<min)
                {
                    res=nums[i]+nums[j]+nums[k];
                    min=Math.abs(nums[i]+nums[j]+nums[k]-target);
                    if(min==0)
                        return res;//此处优化
                }
                if(nums[i]+nums[j]+nums[k]>target)
                    k--;
                else
                    j++;
            }
        }
        return res;
    }
}
