//1
class Solution {
    public int divide(int dividend, int divisor) 
    {
        if(dividend==Integer.MIN_VALUE&&divisor==-1)
            return Integer.MAX_VALUE;
        long div=(long)dividend;
        long divr=(long)divisor;
        int res=0;
        int flag=0;
        if(div<0)
        {
            flag=divr>0?-1:1;
            divr=divr>0?divr:-divr;
            div=-div;
        }
        else
        {
            flag=divr>0?1:-1;
            divr=divr>0?divr:-divr;
        }
        long rdiv=div;
        long rdivr=divr;
        if(div<divr)
            return 0;
        long pre=divr;
        while(divr<=div)
        {
            pre=divr;
            divr+=divr;
            res=res==0?1:res+res;
        }
        System.out.println();
        if(div<divr)
            res+=divide((int)rdiv-(int)pre,(int)rdivr);
        if(flag==-1)
            return -res;
        return res;
    }
}
//2
class Solution {
    public int divide(int dividend, int divisor) 
    {
        if(dividend==Integer.MIN_VALUE&&divisor==-1)
            return Integer.MAX_VALUE;
        long div=(long)dividend;
        long divr=(long)divisor;
        int res=0;
        int flag=0;
        if(div<0)
        {
            flag=divr>0?-1:1;
            divr=divr>0?divr:-divr;
            div=-div;
        }
        else
        {
            flag=divr>0?1:-1;
            divr=divr>0?divr:-divr;
        }
        res=div(div,divr);
        if(flag==-1)
            return -res;
        return res;
    }
    public int div(long dividend,long divisor)
    {
        int res=0;
        long div=dividend;
        long divr=divisor;
        if(div<divr)
            return 0;
        long pre=divr;
        while(divr<=div)
        {
            pre=divr;
            divr+=divr;
            res=res==0?1:res+res;
        }
        if(div<divr)
            res+=div(dividend-pre,divisor);
        return res;
    }
}
