class Solution {
    public List<String> letterCombinations(String digits) 
    {
        List<String> list=new ArrayList<>();
        if(digits.length()==0)
            return list;
        Map<Character,String> map=new HashMap<>(){{
            put('2',"abc");
            put('3',"def");
            put('4',"ghi");
            put('5',"jkl");
            put('6',"mno");
            put('7',"pqrs");
            put('8',"tuv");
            put('9',"wxyz");
        }};
        backtrace(list,map,digits,0,new StringBuilder());
        return list;
    }
    public void backtrace(List<String> list, Map<Character,String> map,String digits, int start,StringBuilder comb)
    {
        if(start==digits.length())
            list.add(comb.toString());
        else
        {
            int len=map.get(digits.charAt(start)).length();
            for(int i=0;i<len;i++)
            {
                comb.append(map.get(digits.charAt(start)).charAt(i));
                backtrace(list,map,digits,start+1,comb);
                comb.deleteCharAt(start);
            }
        }
    }
}
