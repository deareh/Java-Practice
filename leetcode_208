class Trie {
    private Trie[] root;
    private boolean isEnd;
    /** Initialize your data structure here. */
    public Trie() {
        this.root=new Trie[26];
        this.isEnd=false;
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Trie node=this;
        for(int i=0;i<word.length();i++){
            if(node.root[word.charAt(i)-'a']==null){
                node.root[word.charAt(i)-'a']=new Trie();
            }
            node=node.root[word.charAt(i)-'a'];
        }
        node.isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie node=this;
        for(int i=0;i<word.length();i++){
            if(node.root[word.charAt(i)-'a']==null){
                return false;
            }
            node=node.root[word.charAt(i)-'a'];
        }
        if(node.isEnd==true){
            return true;
        }
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie node=this;
        for(int i=0;i<prefix.length();i++){
            if(node.root[prefix.charAt(i)-'a']==null){
                return false;
            }
            node=node.root[prefix.charAt(i)-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
