//1
class Solution {
    public int searchInsert(int[] nums, int target) 
    {
        var i=0;
        if (nums==null)
        return 0;
        if (target>nums[nums.length-1])
        return nums.length;
        while(target>nums[i])
        {
            i++;
        }
        return i;
    }
}
//2
class Solution 
{
    public int searchInsert(int[] nums, int target) 
    {
        var n=nums.length-1;
        var i=0;
        if (nums==null||target<=nums[0])
        return 0;
        if(target>nums[nums.length-1])
        return nums.length;
        while(i!=(n-1))
        {
            if(target>nums[(i+n)/2])
            {
                i=(i+n)/2;
            }
            else 
            {
                n=(i+n)/2;
            }
        }
        return n;
    }
}
//3
class Solution 
{
    public int searchInsert(int[] nums, int target) 
    {
        var n=nums.length-1;
        var i=0;
        int ans=n+1;
        int mid=0;
        if (nums==null)
        return 0;
        while(i<=n)
        {
            mid=(i+n)/2;
            if(target>nums[mid])
            {
                i=mid+1;
            }
            else if(target<nums[mid])
            {
                ans=mid;
                n=mid-1;
            }
            else 
            return mid;
        }
        return ans;
    }
}
