/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //1
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) 
    {
        List<Integer> list=new ArrayList<>();
        pretra(root,list);
        return list;
    }
    public void pretra(TreeNode root,List<Integer> list)
    {
        if(root==null)
            return;
        list.add(root.val);
        pretra(root.left,list);
        pretra(root.right,list);
    }
}
//2
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) 
    {
        List<Integer> list=new ArrayList<>();
        if(root==null)
            return list;
        Deque<TreeNode> stack=new ArrayDeque<>();
        stack.push(root);
        while(!stack.isEmpty())
        {
            var now=stack.pop();
            list.add(now.val);
            if(now.right!=null)
                stack.push(now.right);
            if(now.left!=null)
                stack.push(now.left);
        }
        return list;
    }
}
//3
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) 
    {
        List<Integer> list=new ArrayList<>();
        if(root==null)
            return list;
        TreeNode cur=root;
        TreeNode fro=null;
        while(cur!=null)
        {
            fro=cur.left;
            if(fro!=null)
            {
                while(fro.right!=null&&fro.right!=cur)
                {
                    fro=fro.right;
                }
                if(fro.right==null)
                {
                    list.add(cur.val);
                    fro.right=cur;
                    cur=cur.left;
                    continue;
                }
                else
                    fro.right=null;
            }
            else 
                list.add(cur.val);
            cur=cur.right;
        }
        return list;
    }
}
